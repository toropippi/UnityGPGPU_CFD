#pragma kernel newgrad
#pragma kernel newgrad2
#pragma kernel upwind0
#pragma kernel upwind1
#pragma kernel dcip0
#pragma kernel dcip1
#pragma kernel pressure0
#pragma kernel pressure1
#pragma kernel div
#pragma kernel rhs
#pragma kernel veloc
#pragma kernel nensei0
#pragma kernel nensei1
#pragma kernel Vorticity
#pragma kernel computebuffermemcopy_i
#pragma kernel computebuffermemcopy_f
#pragma kernel fillmem_f
#pragma kernel fillmem_ui
#define WX (uint)(192)
#define WY (uint)(144)
#define limitf 0.85f

float arufa;//?
float ALPHA;//(float)1.79
float ar1fa;//?
float DT;//(float)1.79

uint OFSET0;//データコピーの際に使用するオフセット
uint OFSET1;//データコピーの際に使用するオフセット
uint OFSET2;//データコピーの際に使用するオフセット
uint OFSET3;//データコピーの際に使用するオフセット
uint OFSETDST;//データコピーの際に使用するオフセット
uint OFSETSRC;//データコピーの際に使用するオフセット

float FCOLOR;//floatのcolorなどいろいろ
uint UICOLOR;//uintのcolorなどいろいろ

RWStructuredBuffer<float> u;
RWStructuredBuffer<float> v;
RWStructuredBuffer<float> fn;
RWStructuredBuffer<float> gxn;
RWStructuredBuffer<float> gyn;
RWStructuredBuffer<float> GXd;
RWStructuredBuffer<float> GYd;
RWStructuredBuffer<float> yn;
RWStructuredBuffer<float> y;
RWStructuredBuffer<float> GX;
RWStructuredBuffer<float> GY;
RWStructuredBuffer<float> YU;
RWStructuredBuffer<float> YUN;
RWStructuredBuffer<float> YUV;
RWStructuredBuffer<float> YV;
RWStructuredBuffer<float> YVN;
RWStructuredBuffer<float> GXU;
RWStructuredBuffer<float> GYU;
RWStructuredBuffer<float> GXV;
RWStructuredBuffer<float> GYV;
RWStructuredBuffer<float> YVU;
RWStructuredBuffer<float> YP;
RWStructuredBuffer<float> YPN;
RWStructuredBuffer<float> DIV;
RWStructuredBuffer<float> VOR;
RWStructuredBuffer<uint> kabe;
RWStructuredBuffer<uint> kabeP;
RWStructuredBuffer<uint> kabeX;
RWStructuredBuffer<uint> kabeY;
RWStructuredBuffer<uint> DATADSTI;
RWStructuredBuffer<uint> DATASRCI;
RWStructuredBuffer<float> DATADST;
RWStructuredBuffer<float> DATASRC;
RWStructuredBuffer<uint> DATADSTUI;


























// (192, 1, 1)のスレッドで回す
[numthreads(WX, 1, 1)]
void newgrad(int2 id : SV_DispatchThreadID) 
{
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	int ij = i + j;
	GX[ij] += (yn[i1 + j] - yn[i0 + j] - y[i1 + j] + y[i0 + j])*0.5f*(kabe[ij]>128);
	GY[ij] += (yn[i + j1] - yn[i + j0] - y[i + j1] + y[i + j0])*0.5f*(kabe[ij]>128);
}

// (192, 1, 1)のスレッドで回す
[numthreads(WX, 1, 1)]
void newgrad2(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	int ij = i + j;
	GX[ij] += (yn[i1 + j] - yn[i0 + j] - y[i1 + j] + y[i0 + j])*0.5f*(kabe[ij]>128);
	GY[ij] += (yn[i + j1] - yn[i + j0] - y[i + j1] + y[i + j0])*0.5f*(kabe[ij]>128);
}






//一次風上差分のx成分
[numthreads(WX, 1, 1)]
void upwind0(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	int ij = i + j;
	float u = YU[ij];
	float v = YVU[ij];//YUVではありません。y速度の平均が必要です。YVU[ij] = 0.25f*(tv + YVN[i0 + j] + YVN[i0 + j1]);float tv = YVN[ij] + YVN[i + j1];
	if (kabe[ij] > 128) {
		if ((u >= 0.0)&(v >= 0.0)) {
			YUN[ij] = YU[ij] - u * (YU[ij] - YU[i0 + j])*DT - v * (YU[ij] - YU[i + j0])*DT;
		}

		if ((u < 0.0)&(v >= 0.0)) {
			YUN[ij] = YU[ij] - u * (YU[i1 + j] - YU[ij])*DT - v * (YU[ij] - YU[i + j0])*DT;
		}

		if ((u >= 0.0)&(v < 0.0)) {
			YUN[ij] = YU[ij] - u * (YU[ij] - YU[i0 + j])*DT - v * (YU[i + j1] - YU[ij])*DT;
		}

		if ((u < 0.0)&(v < 0.0)) {
			YUN[ij] = YU[ij] - u * (YU[i1 + j] - YU[ij])*DT - v * (YU[i + j1] - YU[ij])*DT;
		}
	}

}

//一次風上差分のy成分
[numthreads(WX, 1, 1)]
void upwind1(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	int ij = i + j;

	float u = YUV[ij];//YVUではありません。x速度の平均が必要です。float tu = YUN[ij] + YUN[i1 + j];YUV[ij] = 0.25f*(tu + YUN[i + j0] + YUN[i1 + j0]);
	float v = YV[ij];//
	if (kabe[ij] > 128) {
		if ((u >= 0.0)&(v >= 0.0)) {
			YVN[ij] = YV[ij] - u * (YV[ij] - YV[i0 + j])*DT - v * (YV[ij] - YV[i + j0])*DT;
		}

		if ((u < 0.0)&(v >= 0.0)) {
			YVN[ij] = YV[ij] - u * (YV[i1 + j] - YV[ij])*DT - v * (YV[ij] - YV[i + j0])*DT;
		}

		if ((u >= 0.0)&(v < 0.0)) {
			YVN[ij] = YV[ij] - u * (YV[ij] - YV[i0 + j])*DT - v * (YV[i + j1] - YV[ij])*DT;
		}

		if ((u < 0.0)&(v < 0.0)) {
			YVN[ij] = YV[ij] - u * (YV[i1 + j] - YV[ij])*DT - v * (YV[i + j1] - YV[ij])*DT;
		}
	}

}







//cip法x方向計算
[numthreads(WX, 1, 1)]
void dcip0(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int jwx = j*WX;
	float a1;
	float b1;
	float c1;
	float d1;
	float f1;
	float e1;
	float g1;
	float tmp0;

	float ui0 = u[(i + WX - 1) % WX + jwx];
	float u_jwx = u[i+jwx];
	float ui1 = u[(i + 1) % WX + jwx];
	float vi0 = v[(i + WX - 1) % WX + jwx];
	float yy = -v[i + jwx] * DT;
	float vi1 = v[(i + 1) % WX + jwx];
	float xx = -u_jwx * DT;

	int isn;
	int jsn;
	float u_im1;// = u[im1];

	if (xx == 0.0f) { isn = 0; u_im1 = u_jwx; }
	else {
		if (xx>0.0f) { isn = -1; u_im1 = ui1;}
		else { isn = 1; u_im1 = ui0;}
	}
	if (yy == 0.0f) { jsn = 0; }
	else {
		if (yy>0.0f) { jsn = -1; }
		else { jsn = 1; }
	}

	int im1 = (i - isn + WX) % WX;
	int jm1 = ((j - jsn + WY) % WY)*WX;
	int jj = i + jm1;//ｙの風上
	jm1 += im1;//ｘｙの風上
	im1 += jwx;//ｘの風上
	jwx += i;//風上なし

	float gxd_jwx = GXd[jwx];
	float gyd_jwx = GYd[jwx];
	float u_j = u[jj];
	float gxd_im1 = GXd[im1];
	float gyd_j = GYd[jj];
	a1 = u_jwx - u_j - u_im1 + u[jm1];
	b1 = GYd[im1] - gyd_jwx;
	d1 = (-a1 - b1*jsn)*isn;
	c1 = (-a1 - (GXd[jj] - gxd_jwx)*isn)*jsn;
	g1 = (c1 - b1)*isn;
	a1 = gxd_im1 + gxd_jwx - 2.0f*isn*(u_jwx - u_im1);
	b1 = gyd_j + gyd_jwx - 2.0f*jsn*(u_jwx - u_j);
	e1 = 3.0f*(u_im1 - u_jwx) + (gxd_im1 + 2.0f*gxd_jwx)*isn;
	f1 = 3.0f*(u_j - u_jwx) + (gyd_j + 2.0f*gyd_jwx)*jsn;
	a1 *= xx;
	b1 *= yy;

	int kb = kabe[jwx];//壁の辺なら速度の更新を行わない
	if (kb>128) {//流体なら。x速度の値を更新
		tmp0 = ((a1 + c1*yy + e1)*xx + g1*yy + gxd_jwx)*xx + ((b1 + d1*xx + f1)*yy + gyd_jwx)*yy + u_jwx;
		if (tmp0<-limitf) { tmp0 = -limitf; }//速度クランプ
		if (tmp0> limitf) { tmp0 = limitf; }//速度クランプ
		fn[jwx] = tmp0;
	}
	a1 = (3.0f*a1 + 2.0f*(c1*yy + e1))*xx + (d1*yy + g1)*yy + gxd_jwx;
	b1 = (3.0f*b1 + 2.0f*(d1*xx + f1))*yy + (c1*xx + g1)*xx + gyd_jwx;

	im1 = (i + WX - 1) % WX + j*WX;
	jm1 = (i + 1) % WX + j*WX;

	if (kb>128) {//流体なら。x速度をx方向に微分した値を更新
		tmp0 = (a1 - 0.5f*DT*(a1*(ui1 - ui0) + b1*(vi1 - vi0)));
		if (tmp0<-limitf) { tmp0 = -limitf; }
		if (tmp0> limitf) { tmp0 = limitf; }
		gxn[jwx] = tmp0;
	}

	im1 = ((j + WY - 1) % WY)*WX + i;
	jm1 = ((j + 1) % WY)*WX + i;
	float uj0;
	float uj1;
	if (isn == 0) { uj0 = u[im1]; uj1 = u[jm1]; }
	else {
		if (isn == 1) { uj0 = u_j; uj1 = u[jm1]; }
		else { uj0 = u[im1]; uj1 = u_j; }
	}
	if (kb>128) {//流体なら。x速度をy方向に微分した値を更新
		tmp0 = (b1 - 0.5f*DT*(a1*(uj1 - uj0) + b1*(v[jm1] - v[im1])));
		if (tmp0<-limitf) { tmp0 = -limitf; }
		if (tmp0> limitf) { tmp0 = limitf; }
		gyn[jwx] = tmp0;
	}
}



//cip法のy方向計算
[numthreads(WX, 1, 1)]
void dcip1(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int jwx = j*WX;
	float a1;
	float b1;
	float c1;
	float d1;
	float f1;
	float e1;
	float g1;
	float tmp0;

	float vi0 = v[(i + WX - 1) % WX + jwx];
	float v_jwx = v[i+jwx];
	float vi1 = v[(i + 1) % WX + jwx];
	float ui0 = u[(i + WX - 1) % WX + jwx];
	float xx = -u[i + jwx] * DT;
	float ui1 = u[(i + 1) % WX + jwx];
	float yy = -v_jwx * DT;

	int isn;//i sign
	int jsn;//j sign
	float v_im1;// = v[im1];

	if (xx == 0.0f) { isn = 0; v_im1 = v_jwx; }
	else {
		if (xx>0.0f) { isn = -1; v_im1 = vi1;}
		else { isn = 1; v_im1 = vi0;}
	}
	if (yy == 0.0f) { jsn = 0; }
	else {
		if (yy>0.0f) { jsn = -1; }
		else { jsn = 1; }
	}

	int im1 = (i - isn + WX) % WX;
	int jm1 = ((j - jsn + WY) % WY)*WX;
	int jj = i + jm1;//ｙの風上
	jm1 += im1;//ｘｙの風上
	im1 += jwx;//ｘの風上
	jwx += i;//風上なし

	float gxd_jwx = GXd[jwx];
	float gyd_jwx = GYd[jwx];
	float v_j = v[jj];
	float gxd_im1 = GXd[im1];
	float gyd_j = GYd[jj];
	a1 = v_jwx - v_j - v_im1 + v[jm1];
	b1 = GYd[im1] - gyd_jwx;
	d1 = (-a1 - b1*jsn)*isn;
	c1 = (-a1 - (GXd[jj] - gxd_jwx)*isn)*jsn;
	g1 = (c1 - b1)*isn;
	a1 = gxd_im1 + gxd_jwx - 2.0f*isn*(v_jwx - v_im1);
	b1 = gyd_j + gyd_jwx - 2.0f*jsn*(v_jwx - v_j);
	e1 = 3.0f*(v_im1 - v_jwx) + (gxd_im1 + 2.0f*gxd_jwx)*isn;
	f1 = 3.0f*(v_j - v_jwx) + (gyd_j + 2.0f*gyd_jwx)*jsn;
	a1 *= xx;
	b1 *= yy;

	int kb = kabe[jwx];//壁の辺なら速度の更新を行わない
	if (kb>128) {//流体なら。y速度の値を更新
		tmp0 = ((a1 + c1*yy + e1)*xx + g1*yy + gxd_jwx)*xx + ((b1 + d1*xx + f1)*yy + gyd_jwx)*yy + v_jwx;
		if (tmp0<-limitf) { tmp0 = -limitf; }
		if (tmp0> limitf) { tmp0 = limitf; }
		fn[jwx] = tmp0;
	}
	a1 = (3.0f*a1 + 2.0f*(c1*yy + e1))*xx + (d1*yy + g1)*yy + gxd_jwx;
	b1 = (3.0f*b1 + 2.0f*(d1*xx + f1))*yy + (c1*xx + g1)*xx + gyd_jwx;

	if (kb>128) {//流体なら。y速度をx方向に微分した値を更新
		tmp0 = (a1 - 0.5f*DT*(a1*(ui1 - ui0) + b1*(vi1 - vi0)));
		if (tmp0<-limitf) { tmp0 = -limitf; }
		if (tmp0> limitf) { tmp0 = limitf; }
		gxn[jwx] = tmp0;
	}

	im1 = ((j + WY - 1) % WY)*WX + i;
	jm1 = ((j + 1) % WY)*WX + i;
	float vj0;
	float vj1;
	if (jsn == 0) {vj0 = v[im1];vj1 = v[jm1];}
	else {
		if (jsn == 1) { vj0 = v_j; vj1 = v[jm1]; }
		else{ vj0 = v[im1]; vj1 = v_j; }
	}
	if (kb>128) {//流体なら。y速度をy方向に微分した値を更新
		tmp0 = (b1 - 0.5f*DT*(a1*(u[jm1] - u[im1]) + b1*(vj1 - vj0)));
		if (tmp0<-limitf) { tmp0 = -limitf; }
		if (tmp0> limitf) { tmp0 = limitf; }
		gyn[jwx] = tmp0;
	}
}













// (128, 1, 1)のスレッドで回す
[numthreads(128, 1, 1)]
void pressure0(uint id : SV_DispatchThreadID) {
	uint i = id*2+1;
	uint j = i / WX;
	i -= j * WX + ((j % 2) == 1);//違いはここだけ
	//この時点でi,jは確定
	uint i0 = j * WX + (i + WX - 1) % WX;
	uint i1 = j * WX + (i      + 1) % WX;
	uint j0 = ((j + WY - 1) % WY)*WX + i;
	uint j1 = ((j      + 1) % WY)*WX + i;
	uint ij = j * WX + i;
	float ff = DIV[ij];
	float p = YPN[ij];
	float f1 = YPN[i0];
	float f2 = YPN[i1];
	float f3 = YPN[j0];
	float f4 = YPN[j1];

	if (kabeP[i0]>64) { ff -= f1; }
	else { ff -= p; }
	if (kabeP[i1]>64) { ff -= f2; }
	else { ff -= p; }
	if (kabeP[j0]>64) { ff -= f3; }
	else { ff -= p; }
	if (kabeP[j1]>64) { ff -= f4; }
	else { ff -= p; }

	YPN[ij] -= (0.25f*ff+p)*ALPHA*(kabeP[ij]>128);
}


// (128, 1, 1)のスレッドで回す
[numthreads(128, 1, 1)]
void pressure1(uint id : SV_DispatchThreadID) {
	uint i = id * 2 + 1;
	uint j = i / WX;
	i -= j * WX + ((j % 2) == 0);//違いはここだけ
								 //この時点でi,jは確定
	uint i0 = j * WX + (i + WX - 1) % WX;
	uint i1 = j * WX + (i + 1) % WX;
	uint j0 = ((j + WY - 1) % WY)*WX + i;
	uint j1 = ((j + 1) % WY)*WX + i;
	uint ij = j * WX + i;
	float ff = DIV[ij];
	float p = YPN[ij];
	float f1 = YPN[i0];
	float f2 = YPN[i1];
	float f3 = YPN[j0];
	float f4 = YPN[j1];

	if (kabeP[i0]>64) { ff -= f1; }
	else { ff -= p; }
	if (kabeP[i1]>64) { ff -= f2; }
	else { ff -= p; }
	if (kabeP[j0]>64) { ff -= f3; }
	else { ff -= p; }
	if (kabeP[j1]>64) { ff -= f4; }
	else { ff -= p; }

	YPN[ij] -= (0.25f*ff + p)*ALPHA*(kabeP[ij]>128);
}



[numthreads(WX, 1, 1)]
void div(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i1 = (i + 1) % WX;
	int j1 = (j + 1) % WY;
	j *= WX;
	j1 *= WX;
	int ij = i + j;
	DIV[ij] = (YUN[i1 + j] - YUN[ij] + YVN[i + j1] - YVN[ij]);
}




[numthreads(WX, 1, 1)]
void rhs(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int j0 = (j - 1 + WY) % WY;
	j *= WX;
	j0 *= WX;
	int ij = i + j;
	YUN[ij] -= (YPN[ij] - YPN[i0 + j])*(kabeX[ij]>128);
	YVN[ij] -= (YPN[ij] - YPN[i + j0])*(kabeY[ij]>128);
}


//cip法で使う中間速度定義点をここで計算している
[numthreads(WX, 1, 1)]
void veloc(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	int ij = i + j;
	float tv = YVN[ij] + YVN[i + j1];
	float tu = YUN[ij] + YUN[i1 + j];
	YVU[ij] = 0.25f*(tv + YVN[i0 + j] + YVN[i0 + j1]);
	YUV[ij] = 0.25f*(tu + YUN[i + j0] + YUN[i1 + j0]);
}


[numthreads(WX, 1, 1)]
void nensei0(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;

	if (kabeX[i + j]>128) { GXd[i + j] = (YU[i + j] + arufa*(YUN[i0 + j] + YUN[i1 + j] + YUN[i + j0] + YUN[i + j1]))*ar1fa; }
	if (kabeY[i + j]>128) { GYd[i + j] = (YV[i + j] + arufa*(YVN[i0 + j] + YVN[i1 + j] + YVN[i + j0] + YVN[i + j1]))*ar1fa; }
}


[numthreads(WX, 1, 1)]
void nensei1(int2 id : SV_DispatchThreadID) {
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	if (kabeX[i + j]>128) { YUN[i + j] = (YU[i + j] + arufa*(GXd[i0 + j] + GXd[i1 + j] + GXd[i + j0] + GXd[i + j1]))*ar1fa; }
	if (kabeY[i + j]>128) { YVN[i + j] = (YV[i + j] + arufa*(GYd[i0 + j] + GYd[i1 + j] + GYd[i + j0] + GYd[i + j1]))*ar1fa; }
}





//渦度が高すぎるところだけを平滑化する
[numthreads(WX, 1, 1)]
void Vorticity(int2 id : SV_DispatchThreadID)
{
	int i = id.x;
	int j = id.y;
	int i0 = (i - 1 + WX) % WX;
	int i1 = (i + 1) % WX;
	int j0 = (j - 1 + WY) % WY;
	int j1 = (j + 1) % WY;
	j *= WX;
	j0 *= WX;
	j1 *= WX;
	float uu = YUN[i + j0];
	float ud = YUN[i + j];
	float vl = YVN[i0 + j];
	float vr = YVN[i + j];
	//右回りを正とする
	float vor = uu - ud + vr - vl;
	VOR[i + j] = vor;
}





//配列コピーint版、完全コピー用
[numthreads(64, 1, 1)]
void computebuffermemcopy_i(uint id : SV_DispatchThreadID)
{
	if (id < OFSET0) {
		DATADSTI[id + OFSETDST] = DATASRCI[id + OFSETSRC];
	}
}


//配列コピーfloat版、完全コピー用
[numthreads(64, 1, 1)]
void computebuffermemcopy_f(uint id : SV_DispatchThreadID)
{
	if (id < OFSET0) {
		DATADST[id+ OFSETDST] = DATASRC[id+ OFSETSRC];
	}
}

//fill関数float版
[numthreads(64, 1, 1)]
void fillmem_f(uint id : SV_DispatchThreadID)
{
	if (id < OFSET0) {
		DATADST[id + OFSETDST] = FCOLOR;
	}
}

//fill関数uint版
[numthreads(64, 1, 1)]
void fillmem_ui(uint id : SV_DispatchThreadID)
{
	if (id < OFSET0) {
		DATADSTUI[id + OFSETDST] = UICOLOR;
	}
}